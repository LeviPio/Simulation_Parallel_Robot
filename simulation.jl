#Simulaçao de robo paralelo baseado em mecanismo de 5 barras

using PyPlot

#Controlador PID
kp = 0.5
kd = 0.1
ki = 0.2

function pid(e,de,int_e)
	T1 = (kp*e[1] + kd*(de[1]) + ki*int_e[1])*50
	T2 = (kp*e[2] + kd*(de[2]) + ki*int_e[2])*50
	T = [T1 T2]

	return T'
end

#Comprimento dos elos (m):
a11 = -68/2000
a12 = 100/1000
a13 = 125/1000
a21 = 68/2000
a22 = 80/1000
a23 = 115/1000

#condiçoes iniciais:
q = [150*pi/180 30*pi/180]
zr = [0 0]

#Set-points:
qd = [109.6*pi/180 51.11*pi/180]
#qd = [133*pi/180 67.73*pi/180]

e = [0 0]
e0 = [0 0]
int_e = [0 0]

function robo(q,zr)

	q11 = q[1]
	q21 = q[2]
	dq11 = zr[1]
	dq21 = zr[2]

	#Cinematica:

	C=(a21-a11)+a22*cos(q21)-a12*cos(q11)
	D=a22*sin(q21)-a12*sin(q11)
	E=(a13^2-a23^2-(C^2+D^2))/(2*a23)

	#println((2*E*C)^2-4*(C^2+D^2)*(E^2-D^2))

	q22=acos(2*E*C-sqrt((2*E*C)^2-4*(C^2+D^2)*(E^2-D^2))/2*(C^2+D^2))-q21
	q12=asin(a22*sin(q21)+a23*sin(q21+q22)-a12*sin(q11)/a13)-q11

	#Transformaçao do vetor de velocidades
	ro11 = 1
	ro12 = 0
	ro21 = 0
	ro22 = 1
	ro31 = -(8*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10))/sin(q11 + q12 - q21 - q22)
	ro32 = -(16*sin(q22))/(25*sin(q11 + q12 - q21 - q22))
	ro41 = (20*sin(q12))/(23*sin(q11 + q12 - q21 - q22))
	ro42 = -(200*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(23*sin(q11 + q12 - q21 - q22))

	ro=[ro11 ro12;ro21 ro22;ro31 ro32;ro41 ro42]

	z = ro*zr'

	dq12 = z'[3]
	dq22 = z'[4]

	#Dinamica:
	D11 = (103109*cos(q12))/200000000 + (756825076917*sin(q12)^2)/(330625000000000*sin(q11 + q12 - q21 - q22)^2) - (4483*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10)*((23*cos(q12))/4000 + 529/160000))/(12500*sin(q11 + q12 - q21 - q22)) - (8*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10)*((103109*cos(q12))/400000000 - (2371507*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10))/(2000000000*sin(q11 + q12 - q21 - q22)) + 2371507/16000000000))/sin(q11 + q12 - q21 - q22) + 2177040973243/3000000000000000

	D12 = (41373*sin(q12)*((4277*cos(q22))/625000 + 18292729/2500000000))/(115000*sin(q11 + q12 - q21 - q22)) - (16*sin(q22)*((103109*cos(q12))/400000000 - (2371507*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10))/(2000000000*sin(q11 + q12 - q21 - q22)) + 2371507/16000000000))/(25*sin(q11 + q12 - q21 - q22)) - (756825076917*sin(q12)*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(33062500000000*sin(q11 + q12 - q21 - q22)^2)

	D21 = (20*sin(q12)*((176952321*cos(q22))/62500000000 - (756825076917*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(28750000000000*sin(q11 + q12 - q21 - q22)) + 756825076917/250000000000000))/(23*sin(q11 + q12 - q21 - q22)) + (2371507*sin(q22)*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10))/(3125000000*sin(q11 + q12 - q21 - q22)^2) - (4483*sin(q22)*((23*cos(q12))/4000 + 529/160000))/(156250*sin(q11 + q12 - q21 - q22))

	D22 = (176952321*cos(q22))/31250000000 + (2371507*sin(q22)^2)/(39062500000*sin(q11 + q12 - q21 - q22)^2) - (41373*((4277*cos(q22))/625000 + 18292729/2500000000)*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(11500*sin(q11 + q12 - q21 - q22)) - (200*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25)*((176952321*cos(q22))/62500000000 - (756825076917*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(28750000000000*sin(q11 + q12 - q21 - q22)) + 756825076917/250000000000000))/(23*sin(q11 + q12 - q21 - q22)) + 89825638637/15625000000000

	C11 = (103109*dq12*sin(q12)*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10))/(50000000*sin(q11 + q12 - q21 - q22)) - ((103109*cos(q12))/400000000 - (2371507*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10))/(2000000000*sin(q11 + q12 - q21 - q22)) + 2371507/16000000000)*((8*sin(q21 + q22)*((sin(q11 + q12)*(dq11 + dq12))/8 + (dq11*sin(q11))/10))/sin(q11 + q12 - q21 - q22) + (8*cos(q21 + q22)*((cos(q11 + q12)*(dq11 + dq12))/8 + (dq11*cos(q11))/10))/sin(q11 + q12 - q21 - q22) - (20*sin(q12)*((23*cos(q21 + q22)^2*(dq21 + dq22))/(25*sin(q11 + q12 - q21 - q22)) + (23*sin(q21 + q22)^2*(dq21 + dq22))/(25*sin(q11 + q12 - q21 - q22))))/(23*sin(q11 + q12 - q21 - q22)) - (8*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10)*((cos(q11 + q12)*cos(q21 + q22)*(dq11 + dq12))/sin(q11 + q12 - q21 - q22) + (sin(q11 + q12)*sin(q21 + q22)*(dq11 + dq12))/sin(q11 + q12 - q21 - q22)))/sin(q11 + q12 - q21 - q22)) - (756825076917*sin(q12)*((200*sin(q11 + q12)*((sin(q11 + q12)*(dq11 + dq12))/8 + (dq11*sin(q11))/10))/(23*sin(q11 + q12 - q21 - q22)) - (8*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10)*((25*cos(q11 + q12)^2*(dq11 + dq12))/(23*sin(q11 + q12 - q21 - q22)) + (25*sin(q11 + q12)^2*(dq11 + dq12))/(23*sin(q11 + q12 - q21 - q22))))/sin(q11 + q12 - q21 - q22) - (20*sin(q12)*((cos(q11 + q12)*cos(q21 + q22)*(dq21 + dq22))/sin(q11 + q12 - q21 - q22) + (sin(q11 + q12)*sin(q21 + q22)*(dq21 + dq22))/sin(q11 + q12 - q21 - q22)))/(23*sin(q11 + q12 - q21 - q22)) + (200*cos(q11 + q12)*((cos(q11 + q12)*(dq11 + dq12))/8 + (dq11*cos(q11))/10))/(23*sin(q11 + q12 - q21 - q22))))/(287500000000000*sin(q11 + q12 - q21 - q22)) - (103109*dq11*sin(q12)*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10))/(50000000*sin(q11 + q12 - q21 - q22)) - (103109*dq12*sin(q12))/200000000

	C12 = ((103109*cos(q12))/400000000 - (2371507*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10))/(2000000000*sin(q11 + q12 - q21 - q22)) + 2371507/16000000000)*((8*sin(q21 + q22)*((23*sin(q21 + q22)*(dq21 + dq22))/200 + (2*dq21*sin(q21))/25))/sin(q11 + q12 - q21 - q22) - (200*((23*cos(q21 + q22)^2*(dq21 + dq22))/(25*sin(q11 + q12 - q21 - q22)) + (23*sin(q21 + q22)^2*(dq21 + dq22))/(25*sin(q11 + q12 - q21 - q22)))*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(23*sin(q11 + q12 - q21 - q22)) + (16*sin(q22)*((cos(q11 + q12)*cos(q21 + q22)*(dq11 + dq12))/sin(q11 + q12 - q21 - q22) + (sin(q11 + q12)*sin(q21 + q22)*(dq11 + dq12))/sin(q11 + q12 - q21 - q22)))/(25*sin(q11 + q12 - q21 - q22)) + (8*cos(q21 + q22)*((23*cos(q21 + q22)*(dq21 + dq22))/200 + (2*dq21*cos(q21))/25))/sin(q11 + q12 - q21 - q22)) + (756825076917*sin(q12)*((200*sin(q11 + q12)*((23*sin(q21 + q22)*(dq21 + dq22))/200 + (2*dq21*sin(q21))/25))/(23*sin(q11 + q12 - q21 - q22)) - (200*((cos(q11 + q12)*cos(q21 + q22)*(dq21 + dq22))/sin(q11 + q12 - q21 - q22) + (sin(q11 + q12)*sin(q21 + q22)*(dq21 + dq22))/sin(q11 + q12 - q21 - q22))*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(23*sin(q11 + q12 - q21 - q22)) + (200*cos(q11 + q12)*((23*cos(q21 + q22)*(dq21 + dq22))/200 + (2*dq21*cos(q21))/25))/(23*sin(q11 + q12 - q21 - q22)) + (16*sin(q22)*((25*cos(q11 + q12)^2*(dq11 + dq12))/(23*sin(q11 + q12 - q21 - q22)) + (25*sin(q11 + q12)^2*(dq11 + dq12))/(23*sin(q11 + q12 - q21 - q22))))/(25*sin(q11 + q12 - q21 - q22))))/(287500000000000*sin(q11 + q12 - q21 - q22)) + (103109*dq12*sin(q12)*sin(q22))/(625000000*sin(q11 + q12 - q21 - q22)) + (176952321*dq21*sin(q12)*sin(q22))/(71875000000*sin(q11 + q12 - q21 - q22))

	C21 = (2371507*sin(q22)*((8*sin(q21 + q22)*((sin(q11 + q12)*(dq11 + dq12))/8 + (dq11*sin(q11))/10))/sin(q11 + q12 - q21 - q22) + (8*cos(q21 + q22)*((cos(q11 + q12)*(dq11 + dq12))/8 + (dq11*cos(q11))/10))/sin(q11 + q12 - q21 - q22) - (20*sin(q12)*((23*cos(q21 + q22)^2*(dq21 + dq22))/(25*sin(q11 + q12 - q21 - q22)) + (23*sin(q21 + q22)^2*(dq21 + dq22))/(25*sin(q11 + q12 - q21 - q22))))/(23*sin(q11 + q12 - q21 - q22)) - (8*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10)*((cos(q11 + q12)*cos(q21 + q22)*(dq11 + dq12))/sin(q11 + q12 - q21 - q22) + (sin(q11 + q12)*sin(q21 + q22)*(dq11 + dq12))/sin(q11 + q12 - q21 - q22)))/sin(q11 + q12 - q21 - q22)))/(25000000000*sin(q11 + q12 - q21 - q22)) - ((176952321*cos(q22))/62500000000 - (756825076917*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(28750000000000*sin(q11 + q12 - q21 - q22)) + 756825076917/250000000000000)*((200*sin(q11 + q12)*((sin(q11 + q12)*(dq11 + dq12))/8 + (dq11*sin(q11))/10))/(23*sin(q11 + q12 - q21 - q22)) - (8*(sin(q11 + q12 - q21 - q22)/8 + sin(q11 - q21 - q22)/10)*((25*cos(q11 + q12)^2*(dq11 + dq12))/(23*sin(q11 + q12 - q21 - q22)) + (25*sin(q11 + q12)^2*(dq11 + dq12))/(23*sin(q11 + q12 - q21 - q22))))/sin(q11 + q12 - q21 - q22) - (20*sin(q12)*((cos(q11 + q12)*cos(q21 + q22)*(dq21 + dq22))/sin(q11 + q12 - q21 - q22) + (sin(q11 + q12)*sin(q21 + q22)*(dq21 + dq22))/sin(q11 + q12 - q21 - q22)))/(23*sin(q11 + q12 - q21 - q22)) + (200*cos(q11 + q12)*((cos(q11 + q12)*(dq11 + dq12))/8 + (dq11*cos(q11))/10))/(23*sin(q11 + q12 - q21 - q22))) - (103109*dq11*sin(q12)*sin(q22))/(625000000*sin(q11 + q12 - q21 - q22)) - (176952321*dq22*sin(q12)*sin(q22))/(71875000000*sin(q11 + q12 - q21 - q22))

	C22 = ((176952321*cos(q22))/62500000000 - (756825076917*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(28750000000000*sin(q11 + q12 - q21 - q22)) + 756825076917/250000000000000)*((200*sin(q11 + q12)*((23*sin(q21 + q22)*(dq21 + dq22))/200 + (2*dq21*sin(q21))/25))/(23*sin(q11 + q12 - q21 - q22)) - (200*((cos(q11 + q12)*cos(q21 + q22)*(dq21 + dq22))/sin(q11 + q12 - q21 - q22) + (sin(q11 + q12)*sin(q21 + q22)*(dq21 + dq22))/sin(q11 + q12 - q21 - q22))*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(23*sin(q11 + q12 - q21 - q22)) + (200*cos(q11 + q12)*((23*cos(q21 + q22)*(dq21 + dq22))/200 + (2*dq21*cos(q21))/25))/(23*sin(q11 + q12 - q21 - q22)) + (16*sin(q22)*((25*cos(q11 + q12)^2*(dq11 + dq12))/(23*sin(q11 + q12 - q21 - q22)) + (25*sin(q11 + q12)^2*(dq11 + dq12))/(23*sin(q11 + q12 - q21 - q22))))/(25*sin(q11 + q12 - q21 - q22))) - (176952321*dq22*sin(q22))/31250000000 - (2371507*sin(q22)*((8*sin(q21 + q22)*((23*sin(q21 + q22)*(dq21 + dq22))/200 + (2*dq21*sin(q21))/25))/sin(q11 + q12 - q21 - q22) - (200*((23*cos(q21 + q22)^2*(dq21 + dq22))/(25*sin(q11 + q12 - q21 - q22)) + (23*sin(q21 + q22)^2*(dq21 + dq22))/(25*sin(q11 + q12 - q21 - q22)))*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(23*sin(q11 + q12 - q21 - q22)) + (16*sin(q22)*((cos(q11 + q12)*cos(q21 + q22)*(dq11 + dq12))/sin(q11 + q12 - q21 - q22) + (sin(q11 + q12)*sin(q21 + q22)*(dq11 + dq12))/sin(q11 + q12 - q21 - q22)))/(25*sin(q11 + q12 - q21 - q22)) + (8*cos(q21 + q22)*((23*cos(q21 + q22)*(dq21 + dq22))/200 + (2*dq21*cos(q21))/25))/sin(q11 + q12 - q21 - q22)))/(25000000000*sin(q11 + q12 - q21 - q22)) - (176952321*dq21*sin(q22)*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(7187500000*sin(q11 + q12 - q21 - q22)) + (176952321*dq22*sin(q22)*((23*sin(q11 + q12 - q21 - q22))/200 + (2*sin(q11 + q12 - q21))/25))/(7187500000*sin(q11 + q12 - q21 - q22))

	D = [D11 D12;D21 D22] #Matriz de inercia
	C = [C11 C12;C21 C22] #Matriz de efeito Coriolis e forças centripetas

	dz = inv(D)*(pid(e,e0,int_e) - C*zr')

	return dz
	
end

#println(robo(q,zr))

function rkf(q,zr)
	#Runge-Kutta de 4 ordem (passe fixo):
	# h = 1.5e-4

	# k1 = h*zr'

	# l1 = h*robo(q,zr)

	# k2 = h*(zr'+l1/2)

	# l2 = h*robo(q+k1'/2,zr+l1'/2)

	# k3 = h*(zr'+l2/2)

	# l3 = h*robo(q+k2'/2,zr+l2'/2)

	# k4 = h*(zr'+l3)

	# l4 = h*robo(q+k3',zr+l3')

	# qi = q' + h*(k1 + 2*k2 + 2*k3 + k4)/6
	# zi = zr' + h*(l1 + 2*l2 + 2*l3 + l4)/6

	#Runge-Kutta Fehlberg (passe variavel):
	h = 1e-6

	k1 = h*zr'

	l1 = h*robo(q,zr)

	k2 = h*(zr'+l1/4)

	l2 = h*robo(q+k1'/4,zr+l1'/4)

	k3 = h*(zr'+3*l1/32+9*l2/32)

	l3 = h*robo(q+(3*k1'/32)+(9*l1'/32),zr+(3*k1'/32)+(3*l1'/32))

	k4 = h*(zr'+(1932*l1/2197)-(7200*l2/2197)+(7296*l3/2197))

	l4 = h*robo(q+(1932*k1'/2197)-(7200*k2'/2197)+(7296*k3'/2197),zr+(1932*l1'/2197)-(7200*l2'/2197)+(7296*l3'/2197))

	k5 = h*(zr'+(439*l1/216)-8*l2+(3680*l3/513)-(845*l4/4104))

	l5 = h*robo(q+(439*k1'/216)-8*k2'+(3680*k3'/513)-(845*k4'/4104),zr+(439*l1'/216)-8*l2'+(3680*l3'/513)-(845*l4'/4104))

	k6 = h*(zr'-(8*l1/27)+2*l2+(3544*l3/2565)+(1859*l4/4104)-(11*l5/40))

	l6 = h*robo(q-(8*k1'/27)+2*k2'+(3544*k3'/2565)+(1859*k4'/4104)-(11*k5'/40),zr-(8*l1'/27)+2*l2'+(3544*l3'/2565)+(1859*l4'/4104)-(11*l5'/40))

	# #Aproximaçao de 4 ordem
	# #qi = q' + (25*k1/216) + (1408*k3/2565) + (2197*k4/4104) - (k5/5)
	# #zi = zr' + (25*l1/216) + (1408*l3/2565) + (2197*l4/4104) - (l5/5)

	#Aproximaçao de 5 ordem
	qi = q' + (16*k1/135) + (6656*k3/12825) + (28561*k4/56430) - (9*k5/50) + (2*k6/55)
	zi = zr' + (16*l1/135) + (6656*l3/12825) + (28561*l4/56430) - (9*l5/50) + (2*l6/55)

	vet = [qi';zi']

	return vet

end

e = qd - q
i = 0

t = 0 #Tempo de inicio de simulaçao
t_exe = 5 #Tempo de execuçao
dt = 1e-3

while (((e[1]>1e-3)||(e[2]>1e-3)) && t<t_exe)

	#println(q,qd)
	#println(e)

	vet = rkf(q,zr)
	q = vet[1,:]
	zr = vet[2,:]

	if i == 0
		e0 = [0 0]
	end

	if i > 0
		e0 = e
	end

	e = qd - q
	de = [0 0] - zr
	int_e += e
	#println(pid(e,de,int_e))
	#println(zr)
	plot(zr)

	i += 1

	t = i*dt
	#println("tempo = ",t,"  erro = ",e)
end


